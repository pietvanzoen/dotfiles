[include]
  # Import environment specific config and sensitive data.
  path = ~/.gitconfig.local

[user]
  name = pietvanzoen
  email = hi@piet.me
  username = pietvanzoen
  signingkey = ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC7NF6N6kihpyaaGT6YNsEe5IQQ0vi9/loKW9PktTegzN6sPTkogPufWcSHoPNapqnLrPIJeK6v1l44tduMQsxgI83m7y6UN1AaN2s5tPvEk3EVzEdGmSsL8NW3ggNo4EcBvQce1Eaxg6aKoJf+qnlQa4hzaDaupxAM8RMmE/CtcHj7GeW5rG5LNpJhwG6LnVEcGXStVbc7JvmbYF3C2X+bi5uPBCGtwMyS/fJWhfAKwGGTv3pJ9ZBX/wSi23SkuQ4qWnB4ZnPY8iwkMtmBllPnBfarZJmZQ66lgix9gKwX4ZTh8NFc4UoQs5nx56rog8C07mOy6bEfxIwOCWTMXa+5kuFkJOMHa34C85caItSfmgB72V/laZzU+KKoZGjQ9lhGLvwgnH20IG8bCLLgjSUmWNCdBP5nx2BIgzSiObi+SXHSrX2XJbhMxtBMfu33gyCuxO1dxJDErFe3NdI20ODdeEPteUvE/I1hPW7T4g4CS+jYvxKN5bBZxewAYdvJ6o4bSPcpO+6x4o9zEjJ+vTBNtfGUKLyuQq0gx2E0ZFHhJIcNTTSLJ42fniDAbDj7WMWZTE6PsFnmSauCG6mSDp/ZJYVVceHdsGEIZehOOWYXkdKSQDM15XJqKgKIU+/Yt5DZ5FxNh8cSGqpfpzmhU1lBaxR4BeYSeWX8l7ObGd7k2w==

[gpg]
  format = ssh

[gpg "ssh"]
  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"

[commit]
  gpgsign = true

[github]
  user = pietvanzoen

[core]
  excludesfile = ~/.gitignore_global
  pager = delta

[init]
  templatedir = ~/.gittemplate
  defaultBranch = main

[alias]
  ###############################################
  # LOGGING
  ###############################################

  # Pretty logging.
  ll = log --graph --topo-order --pretty=format:'%C(green)%h%Creset%C(red)%d%Creset %s %C(cyan)(%cr) %C(blue)<%an>%Creset %C(black)%G?%Creset' --abbrev-commit
  l = log --graph --oneline --topo-order
  ln = l --no-merges

  lb = !git l origin/$(git trunk)..$(git symbolic-ref --short HEAD) # Log commits that diverge from origin/<trunk>.
  lt = !git l $(git latest-tag-version)..HEAD
  la = !git l --all # Log with all refs.
  r = !git l -12 # Log recent commits.
  ra = !git r --all # Log recent commits from all refs.
  rn = r --no-merges
  rl = !git ll -12

  # Create a simple change log for copy/pasting into PRs.
  changelog = "!git log --pretty=\"* %s\" --date=short"
  changelog-tag = "!git changelog $(git latest-tag-version)..origin/$(git trunk)"
  changelog-branch = !git changelog origin/$(git trunk)..HEAD

  # get last tag
  latest-tag-version = "!git tag --list --sort='-*authordate' 'v*' | head -n 1"


  ###############################################
  # COMMITING
  ###############################################

  ci = commit
  roll-back-one = reset HEAD~1 # Roll back one commit.
  co = checkout
  mt = mergetool
  sw = switch
  di = diff
  dc = diff --cached
  amend = commit --amend
  pushf = push --force-with-lease
  aa = add --all
  ap = aa -p
  b = branch -vv # Verbose branch list. Shows upstream branches.
  ds = diff --staged --stat=160,120
  dsb = "!git diff --stat=160,120 $(git trunk)..HEAD"
  unmerged = diff --name-only --diff-filter=U
  edit-unmerged = "!nvim `git diff --name-only --diff-filter=U`"

  ###############################################
  # BRANCH MANAGEMENT
  ###############################################

  # get the name of the default branch
  trunk="!git branch -r --points-at refs/remotes/origin/HEAD | grep '\\->' | cut -d' ' -f5 | sed 's/origin\\///'"
  set-trunk="!f() { git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/$1; }; f"
  cot="!git checkout $(git trunk)"

  fr = fetch-rebase
  frt = "!git fetch-rebase \"$(git trunk)\""
  diff-commits = "!git l $(git trunk) --not $(git symbolic-ref --short HEAD)"

  # Run `yarn test` on each commit that diverges from trunk branch.
  test-branch="!run-command-on-git-revisions origin/$(git trunk) $(git symbolic-ref --short HEAD) 'yarn test'"

  push-stack="!git push origin $(git stack --format list --stack descendants) --force-with-lease --set-upstream"

  ###############################################
  # OTHER HELPERS
  ###############################################

  new = "!git init && git symbolic-ref HEAD refs/heads/main"
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

  # clean is destructive, use trash instead
  trash = "!git ls-files --others --exclude-standard | xargs -r trash -v"

  ctag-files = ls-files -cdm

[merge]
  tool = nvim
  summary = true # Always include a summary in merge commits.

[mergetool "nvim"]
  cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[mergetool]
  prompt = false

[push]
  # Default push to update current branch on remote. Then you don't need to type out upstream
  # name when creating a new upstream branch. e.g. To push a new branch to remote just do `git push -u`
  default = current

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[difftool]
  prompt = false

[diff]
  compactionHeuristic = 1
  # tool = vimdiff
  colorMoved = default

[difftool]
  prompt = false

[color "diff"]
  commit = green
  meta = yellow
  frag = cyan
  old = red
  new = green
  whitespace = red reverse

[interactive]
  diffFilter = delta --color-only

[delta]
  features = unobtrusive-line-numbers decorations
  syntax-theme = Solarized (dark)

[delta "unobtrusive-line-numbers"]
    line-numbers = true
    ; line-numbers-minus-style = "#444444"
    ; line-numbers-zero-style = "#444444"
    ; line-numbers-plus-style = "#444444"
    line-numbers-left-format = "{nm:>4}┊"
    line-numbers-right-format = "{np:>4}│"
    line-numbers-left-style = white dim
    line-numbers-right-style = white dim

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none

[fetch]
  prune = true # Always prune refs when fetching.

[pull]
  rebase = true # Always rebase when pulling

[help]
  autocorrect = 20 # After misspelling git command, use closest match after 2s.

[tag]
  sort = -*authordate

[commit]
  template = ~/.git-commit-message.txt
	verbose = true

[credential]
  helper = osxkeychain

[stack]
  stack = descendants
