#!/bin/bash
# Renames the trunk branch of the current repo locally and on remote.
# Then attempts to update the default branch setting in Github.
# For github updates a password or private token will be required.
# Enter this as requested or export GITHUB_PRIVATE_TOKEN.

set -e

USAGE="USAGE: $(basename $0) <new trunk branch>
Example: $(basename $0) main"

main() {
  local new_default_branch="$1"
  if [[ -z "$new_default_branch" ]]; then
    echo "$USAGE"
    exit 1
  fi

  echo "==> Updating local refs"
  _exe "git fetch origin"
  local current_default_branch="$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"

  if [[ ! -z "$(git status -s)" ]]; then
    echo "Commit and push changes before renaming branches."
    exit 1
  fi

  if [[ "$current_default_branch" == "$new_default_branch" ]]; then
    echo "Current default branch is already $new_default_branch"
    exit
  fi

  echo "==> Renaming '$current_default_branch' to '$new_default_branch'"
  _exe "git branch -m $current_default_branch $new_default_branch"
  _exe "git push -u origin $new_default_branch"
  _exe "git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/$new_default_branch"

  update_github "$(git remote get-url origin)" "$new_default_branch"

  echo
  echo "Be sure to also update any protected branch settings. Once you've checked your remote repository you can run the following command to delete the old remote branch:"
  echo "git push --delete origin $current_default_branch"
  echo

  if (_confirm "Or type DELETE to run this command now." "DELETE"); then
    sleep 1
    _exe "git push --delete origin $current_default_branch"
  else
    echo "==> Not deleting $current_default_branch. Run 'git push --delete origin $current_default_branch' to delete later."
  fi

}

update_github() {
  local remote_url="$1"
  local default_branch="$2"
  re="^(https|git)(:\/\/|@)([^\/:]+)[\/:]([^\/:]+)\/(.+).git$"

  if [[ $remote_url =~ $re ]]; then
    # protocol=${BASH_REMATCH[1]}
    # separator=${BASH_REMATCH[2]}
    hostname=${BASH_REMATCH[3]}
    user=${BASH_REMATCH[4]}
    repo=${BASH_REMATCH[5]}
  fi

  if [[ "$hostname" != "github.com" ]]; then
    exit
  fi

  token=$GITHUB_PRIVATE_TOKEN

  if (_confirm "Update the GitHub default branch? [y/n]" "y"); then
    if [[ -z "$token" ]]; then
      echo -e "Enter github private token to make github repo changes: "
      read -s token
    fi
    github_request \
      $token \
      PATCH \
      "/repos/$user/$repo" \
      "{\"default_branch\": \"$default_branch\" }"
  fi

  if (_confirm "Setup GitHub branch protection? [y/n]" "y"); then
    if [[ -z "$token" ]]; then
      echo -e "Enter github private token to make github repo changes: "
      read -s token
    fi
    github_request \
      $token \
      PUT \
      "/repos/$user/$repo/branches/$new_default_branch/protection" \
      '{"required_status_checks": null, "enforce_admins": null, "required_pull_request_reviews": null, "restrictions": null, "allow_deletions": false, "allow_force_pushes": false }'
  fi
}

github_request() {
  local token="$1"
  local method="$2"
  local path="$3"
  local data="$4"
  temp_file="$(mktemp)"

  response=$(curl \
    --silent \
    -o $temp_file \
    -w "%{http_code}" \
    --header "Content-Type: application/json" \
    --header "Authorization: token $token" \
    --request $method \
    --data "$data" \
    https://api.github.com$path)

  if [[ $response != "200" ]]; then
    echo "Error: Request failed. Server returned:"
    cat $temp_file
  else
    echo "==> Success"
  fi
}

# HELPERS
_exe() { echo "+ $@" ; $@ ; }
_confirm() {
  local msg="$1"
  local confirm_answer="$2"
  echo -en "==> $msg "
  read answer
  echo
  if [ "$answer" == "$confirm_answer" ]; then
    return 0
  else
    return 1
  fi
}

main $1
