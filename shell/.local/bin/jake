#!/usr/bin/env bash
# Helper commands for connecting to a ec2 instance.
set -e


if [[ -z "$HELPER_EC2_INSTANCE_ID" ]]; then
  (>&2 echo "Error: HELPER_EC2_INSTANCE_ID must be set")
  exit 1
fi
ID="$HELPER_EC2_INSTANCE_ID"


describe() {
  local prop=$1
  aws ec2 describe-instances --instance-ids $ID | jq -r ".Reservations[0].Instances[0]$prop"
}

CMD=$1
shift

case $CMD in
  id)
    echo $ID
    ;;

  start)
    aws ec2 start-instances --instance-ids $ID
    ;;

  stop)
    aws ec2 stop-instances --instance-ids $ID
    ;;

  describe)
    describe $1
    ;;

  state|status)
    describe '.State.Name'
    ;;

  wait-for)
    states="stopped running"
    desired_state="$1"
    if [[ "$states" != *$desired_state* ]]; then
      (>&2 echo "Error: state '$desired_state' not valid")
      exit 1
    fi

    echo -n "Waiting for $desired_state instance... "
    aws ec2 wait instance-$desired_state --instance-ids $ID
    echo "✓"
    ;;

  type)
    new_type="$1"
    if [[ -z "$new_type" ]]; then
      describe '.InstanceType'
    else
      aws ec2 modify-instance-attribute --instance-type $new_type --instance-id $ID
      $0 type
    fi
    ;;

  ip)
    ip="$(describe .PublicIpAddress)"
    if [[ "$ip" == 'null' ]]; then
      (>&2 echo "Error: No public ip found. Instance may be stopped.")
      exit 1
    fi
    echo $ip
    ;;

  connect)
    state="$($0 state)"
    case $state in
      stopped)
        $0 start > /dev/null
        ;;
      stopping)
        $0 wait-for stopped
        $0 start > /dev/null
        ;;
      rebooting|pending|running)
        ;;
      *)
        (>&2 echo "Error: unknown state '$state'")
        exit 1
        ;;
    esac
    $0 wait-for running
    echo -n "Waiting for ssh agent... "
    ip="$($0 ip)"
    while [[ "$(curl -m 2 $ip:22 2> /dev/null)" != *OpenSSH* ]]; do
      sleep 1
    done
    echo "✓"
    mosh --ssh="ssh -o StrictHostKeyChecking=no" piet@$ip
    ;;

esac
