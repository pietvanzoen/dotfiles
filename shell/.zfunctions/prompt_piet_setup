autoload -U colors
autoload -Uz vcs_info
colors
setopt PROMPT_SUBST

if [[ -n "$TMUX" ]]; then
  # current shell is under tmux
  local tmux_current_session=$(tmux display-message -p '#S')
  local tmux_client_id=$(tmux list-clients -t "${tmux_current_session}" -F '#{client_pid}')
  # echo $tmux_current_session $tmux_client_id
  local pid="$tmux_client_id"
else
  local pid="$$"
fi

CONNECTION_TYPE=""
if [[ -n "$(pstree -ps $pid | grep mosh-server)" ]]; then
  CONNECTION_TYPE="mosh"
elif [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
  CONNECTION_TYPE="ssh"
fi

__black="%{$fg[black]%}"
__dark="%{$fg_dark[white]%}"
__red="%{$fg[red]%}"
__red_bold="%{$fg_bold[red]%}"
__green="%{$fg[green]%}"
__green_bold="%{$fg_bold[green]%}"
__yellow="%{$fg[yellow]%}"
__blue="%{$fg[blue]%}"
__purple="%{$fg[purple]%}"
__cyan="%{$fg[cyan]%}"
__reset_color="%{$reset_color%}"

zstyle ':vcs_info:git*' formats "($__red%b$__yellow%u%c%m$__reset_color)"
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' check-for-staged-changes true
zstyle ':vcs_info:*' stagedstr '+'
zstyle ':vcs_info:*' unstagedstr '*'
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-st
# zstyle ':vcs_info:git*+set-message:*' hooks git-untracked

function +vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        # This will show the marker if there are any untracked files in repo.
        # If instead you want to show the marker only if there are untracked
        # files in $PWD, use:
        #[[ -n $(git ls-files --others --exclude-standard) ]] ; then
        hook_com[staged]+='%%'
    fi
}
function +vi-git-st() {
    local ahead behind
    local -a gitstatus

    remote=${$(git rev-parse --verify ${hook_com[branch]}@{upstream} \
      --symbolic-full-name 2>/dev/null)/refs\/remotes\/}
    [[ ! -z "${remote}" ]] && gitstatus+=( "u" )

    # for git prior to 1.7
    # ahead=$(git rev-list origin/${hook_com[branch]}..HEAD | wc -l)
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+=( "+${ahead}" )

    # for git prior to 1.7
    # behind=$(git rev-list HEAD..origin/${hook_com[branch]} | wc -l)
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+=( "-${behind}" )

    [[ ! -z "${remote}" ]] && [[ $behind == 0 ]] && [[ $ahead == 0 ]] && gitstatus+=("=")

    gst=${(j::)gitstatus}
    [[ ! -z "${gst}" ]] && hook_com[misc]+=" ${gst}"
}

prompt_piet_setup() {
  local EXIT="$?"
  vcs_info
  PROMPT=$(echo "$(__context) $(__cwd)${vcs_info_msg_0_}$(__job_info) $(__caret)" | tr -s ' ' | sed -e 's/^ *//')
  RPROMPT=""
  export PROMPT RPROMPT
}

__caret() {
  local caret="%(!.# .› )"
  [[ -z "$TMUX" ]] && [[ -n "$ITERM_PROFILE" ]] && return
  echo "\n%(0?.$__green_bold.$__red_bold)$caret$__reset_color"
}

__exit_caret() {
  [[ -z "$TMUX" ]] && [[ -n "$ITERM_PROFILE" ]] && return
  echo -n "%(0?.$__green_bold.$__red_bold)›$__reset_color"
}

__cwd() {
  echo -n "$__cyan%2~$__reset_color"
}

__context() {
  echo -n "$(__connection)$(__host)$(__screen)"
}

__connection() {
  local connection=""
  if [[ -n "$CONNECTION_TYPE" ]]; then
    connection="$__blue$CONNECTION_TYPE$__reset_color$__dark|$__reset_color"
  fi
  echo -n "$connection"
}

__host() {
  if [[ -z "$PIET_PROMPT_SHOW_HOST" ]]; then
    return
  fi
  echo -n "$__dark%m$__reset_color"
}

__screen() {
  if [[ -z "$STY" ]]; then
    return
  fi
  echo -n "$__dark|$STY$__reset_color"
}

__node() {
  local gitroot="$(git rev-parse --show-toplevel 2> /dev/null || echo '.')"
  [[ ! -d "$gitroot/node_modules" ]] && return
  echo -n "${__dark}⬢ $(node -v)$__reset_color"
}

# source $HOME/.local/lib/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_STATESEPARATOR="|"
GIT_PS1_SHOWUPSTREAM="verbose"
__git_info() {
  local info=$(__git_ps1 | sed -E 's/\(|\)//g' | xargs)
  [[ -z $info ]] && return;
  local branch="$(echo $info | cut -d '|' -f 1)"
  local gitstatus="$(echo $info | cut -d '|' -f 2,3)"

  echo -n "$__dark($__reset_color"
  echo -n "$__red%30<…<$branch$__reset_color"
  echo -n "$__yellow$gitstatus$__reset_color"
  echo -n "$__dark)$__reset_color"
}

__job_info() {
  echo -n "$__dark%(1j. [%j].)$__reset_color"
}


prompt_piet_setup $@
precmd_functions+='prompt_piet_setup'
# vim:set ft=zsh:
